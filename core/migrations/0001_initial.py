# Generated by Django 5.2.5 on 2025-08-14 15:21

import colorfield.fields
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="The display name of your app (e.g., 'My Shopping App')", max_length=100, verbose_name='App Name')),
                ('description', models.TextField(blank=True, help_text='A brief description of what your app does', verbose_name='App Description')),
                ('package_name', models.CharField(help_text="Unique identifier for your app (e.g., 'com.mycompany.myapp'). This cannot be changed after creation.", max_length=100, unique=True, validators=[django.core.validators.RegexValidator(message='Package name must be in format: com.company.appname (lowercase letters, numbers, dots, underscores only)', regex='^[a-z][a-z0-9_]*(\\.[a-z][a-z0-9_]*)*$')], verbose_name='Package Identifier')),
                ('version', models.CharField(default='1.0.0', help_text="Version number of your app (e.g., '1.0.0', '2.1.3')", max_length=20, verbose_name='App Version')),
                ('build_status', models.CharField(choices=[('not_built', 'Not Built Yet'), ('building', 'Currently Building'), ('success', 'Build Successful'), ('failed', 'Build Failed')], default='not_built', max_length=20, verbose_name='Build Status')),
                ('apk_file', models.FileField(blank=True, help_text='The built Android app file (APK)', null=True, upload_to='apks/', verbose_name='APK File')),
                ('source_code_zip', models.FileField(blank=True, help_text='ZIP file containing the Flutter project source code', null=True, upload_to='source_zips/', verbose_name='Source Code ZIP')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Flutter Application',
                'verbose_name_plural': 'Flutter Applications',
            },
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="A descriptive name for this color scheme (e.g., 'Blue Ocean', 'Dark Mode')", max_length=100, verbose_name='Theme Name')),
                ('primary_color', colorfield.fields.ColorField(default='#2196F3', help_text='The primary color used for buttons, headers, and main elements', image_field=None, max_length=25, samples=None, verbose_name='Main Color')),
                ('accent_color', colorfield.fields.ColorField(default='#FF4081', help_text='Secondary color used for highlights and special elements', image_field=None, max_length=25, samples=None, verbose_name='Accent Color')),
                ('background_color', colorfield.fields.ColorField(default='#FFFFFF', help_text='Main background color of the app', image_field=None, max_length=25, samples=None, verbose_name='Background Color')),
                ('text_color', colorfield.fields.ColorField(default='#000000', help_text='Default color for text throughout the app', image_field=None, max_length=25, samples=None, verbose_name='Text Color')),
                ('font_family', models.CharField(default='Roboto', help_text='The font family to use throughout the app', max_length=50, verbose_name='Font Style')),
                ('is_dark_mode', models.BooleanField(default=False, help_text='Enable dark mode styling', verbose_name='Dark Mode')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'App Theme',
                'verbose_name_plural': 'App Themes',
            },
        ),
        migrations.CreateModel(
            name='BuildHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('build_id', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='Build ID')),
                ('status', models.CharField(choices=[('started', 'Build Started'), ('generating_code', 'Generating Flutter Code'), ('code_generated', 'Code Generated Successfully'), ('code_generation_failed', 'Code Generation Failed'), ('building_apk', 'Building APK'), ('success', 'Build Completed Successfully'), ('failed', 'Build Failed')], default='started', max_length=30, verbose_name='Build Status')),
                ('build_start_time', models.DateTimeField(auto_now_add=True, verbose_name='Build Started')),
                ('build_end_time', models.DateTimeField(blank=True, null=True, verbose_name='Build Completed')),
                ('log_output', models.TextField(blank=True, help_text='Detailed logs from the build process', verbose_name='Build Logs')),
                ('error_message', models.TextField(blank=True, help_text='Error details if build failed', verbose_name='Error Message')),
                ('apk_file', models.FileField(blank=True, null=True, upload_to='build_apks/', verbose_name='Generated APK')),
                ('source_code_zip', models.FileField(blank=True, null=True, upload_to='build_source_zips/', verbose_name='Generated Source Code')),
                ('apk_size_mb', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='APK Size (MB)')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='build_history', to='core.application', verbose_name='Application')),
            ],
            options={
                'verbose_name': 'Build History',
                'verbose_name_plural': 'Build History',
                'ordering': ['-build_start_time'],
            },
        ),
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="A descriptive name for this data source (e.g., 'Product List', 'User Profile')", max_length=100, verbose_name='Data Source Name')),
                ('data_source_type', models.CharField(choices=[('REST_API', 'REST API (Web Service)'), ('STATIC_JSON', 'Static JSON Data')], default='REST_API', help_text='How your app will get the data', max_length=20, verbose_name='Data Source Type')),
                ('base_url', models.URLField(blank=True, help_text="The main web address for your data (e.g., 'https://api.mystore.com')", verbose_name='API Base URL')),
                ('endpoint', models.CharField(blank=True, help_text="The specific path to get data (e.g., '/products', '/users/profile')", max_length=200, verbose_name='API Endpoint')),
                ('method', models.CharField(choices=[('GET', 'GET (Retrieve Data)'), ('POST', 'POST (Send Data)'), ('PUT', 'PUT (Update Data)'), ('DELETE', 'DELETE (Remove Data)')], default='GET', help_text='How to request the data from the server', max_length=10, verbose_name='Request Method')),
                ('headers', models.TextField(blank=True, help_text="Additional information to send with requests (one per line, format: 'Key: Value')", verbose_name='Request Headers')),
                ('static_data', models.TextField(blank=True, help_text='For static data sources, paste your JSON data here', verbose_name='Static JSON Data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_sources', to='core.application', verbose_name='Application')),
            ],
            options={
                'verbose_name': 'Data Source',
                'verbose_name_plural': 'Data Sources',
                'unique_together': {('application', 'name')},
            },
        ),
        migrations.CreateModel(
            name='DataSourceField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(help_text="The name of this data field (e.g., 'product_name', 'price', 'description')", max_length=100, verbose_name='Field Name')),
                ('field_type', models.CharField(choices=[('string', 'Text'), ('integer', 'Number (Whole)'), ('decimal', 'Number (Decimal)'), ('boolean', 'True/False'), ('date', 'Date'), ('datetime', 'Date and Time'), ('url', 'Web Address (URL)'), ('image_url', 'Image Web Address'), ('email', 'Email Address')], help_text='What type of information this field contains', max_length=20, verbose_name='Field Type')),
                ('display_name', models.CharField(help_text="Human-readable name for this field (e.g., 'Product Name', 'Price')", max_length=100, verbose_name='Display Name')),
                ('is_required', models.BooleanField(default=False, help_text='Is this field always present in the data?', verbose_name='Required Field')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('data_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='core.datasource', verbose_name='Data Source')),
            ],
            options={
                'verbose_name': 'Data Field',
                'verbose_name_plural': 'Data Fields',
                'unique_together': {('data_source', 'field_name')},
            },
        ),
        migrations.CreateModel(
            name='Screen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="A descriptive name for this screen (e.g., 'Home Page', 'Product List', 'Settings')", max_length=100, verbose_name='Screen Name')),
                ('route_name', models.CharField(help_text="Internal navigation name (e.g., '/home', '/products', '/settings'). Must start with '/'", max_length=100, verbose_name='Screen Route')),
                ('is_home_screen', models.BooleanField(default=False, help_text='Is this the first screen users see when they open the app?', verbose_name='Home Screen')),
                ('app_bar_title', models.CharField(blank=True, help_text='Text shown in the top bar of this screen', max_length=100, verbose_name='Top Bar Title')),
                ('show_app_bar', models.BooleanField(default=True, help_text='Should this screen have a top bar with title and navigation?', verbose_name='Show Top Bar')),
                ('show_back_button', models.BooleanField(default=True, help_text='Should users be able to go back to the previous screen?', verbose_name='Show Back Button')),
                ('background_color', colorfield.fields.ColorField(blank=True, default=None, help_text='Custom background color for this screen (leave empty to use theme default)', image_field=None, max_length=25, null=True, samples=None, verbose_name='Background Color')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screens', to='core.application', verbose_name='Application')),
            ],
            options={
                'verbose_name': 'App Screen',
                'verbose_name_plural': 'App Screens',
                'unique_together': {('application', 'route_name')},
            },
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="A descriptive name for this action (e.g., 'Go to Product Details', 'Submit Order')", max_length=100, verbose_name='Action Name')),
                ('action_type', models.CharField(choices=[('navigate', 'Navigate to Screen'), ('navigate_back', 'Go Back'), ('api_call', 'Call Web Service'), ('show_dialog', 'Show Popup Message'), ('show_snackbar', 'Show Bottom Message'), ('open_url', 'Open Web Page'), ('send_email', 'Send Email'), ('make_phone_call', 'Make Phone Call'), ('share_content', 'Share Content'), ('take_photo', 'Take Photo'), ('pick_image', 'Pick Image from Gallery'), ('save_data', 'Save Data Locally'), ('load_data', 'Load Saved Data'), ('refresh_data', 'Refresh Data'), ('submit_form', 'Submit Form'), ('validate_form', 'Validate Form'), ('clear_form', 'Clear Form'), ('toggle_visibility', 'Show/Hide Element'), ('play_sound', 'Play Sound'), ('vibrate', 'Vibrate Device')], help_text='What should happen when this action is triggered?', max_length=30, verbose_name='Action Type')),
                ('parameters', models.TextField(blank=True, help_text='Additional parameters for this action (JSON format)', verbose_name='Action Parameters')),
                ('dialog_title', models.CharField(blank=True, help_text='Title for popup messages', max_length=100, verbose_name='Dialog Title')),
                ('dialog_message', models.TextField(blank=True, help_text='Content for popup messages', verbose_name='Dialog Message')),
                ('url', models.URLField(blank=True, help_text='Web address for URL-based actions', verbose_name='URL')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='core.application', verbose_name='Application')),
                ('api_data_source', models.ForeignKey(blank=True, help_text='Which data source to call (for API actions)', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.datasource', verbose_name='API Data Source')),
                ('target_screen', models.ForeignKey(blank=True, help_text='Which screen to navigate to (for navigation actions)', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.screen', verbose_name='Target Screen')),
            ],
            options={
                'verbose_name': 'Action',
                'verbose_name_plural': 'Actions',
                'unique_together': {('application', 'name')},
            },
        ),
        migrations.AddField(
            model_name='application',
            name='theme',
            field=models.ForeignKey(help_text='Choose the color scheme and styling for your app', on_delete=django.db.models.deletion.CASCADE, to='core.theme', verbose_name='App Theme'),
        ),
        migrations.CreateModel(
            name='Widget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('widget_type', models.CharField(choices=[('Column', 'Vertical Layout (Column)'), ('Row', 'Horizontal Layout (Row)'), ('Container', 'Container (Box)'), ('Padding', 'Padding (Spacing)'), ('Center', 'Center Alignment'), ('Expanded', 'Expanded (Fill Space)'), ('Flexible', 'Flexible (Adjust Size)'), ('Wrap', 'Wrap (Flow Layout)'), ('Stack', 'Stack (Layered)'), ('Positioned', 'Positioned (Absolute)'), ('Text', 'Text'), ('Image', 'Image'), ('Icon', 'Icon'), ('Divider', 'Divider Line'), ('Card', 'Card'), ('ListTile', 'List Item'), ('TextField', 'Text Input'), ('ElevatedButton', 'Raised Button'), ('TextButton', 'Text Button'), ('IconButton', 'Icon Button'), ('FloatingActionButton', 'Floating Action Button'), ('Switch', 'On/Off Switch'), ('Checkbox', 'Checkbox'), ('Radio', 'Radio Button'), ('Slider', 'Slider'), ('DropdownButton', 'Dropdown Menu'), ('ListView', 'Scrollable List'), ('GridView', 'Grid Layout'), ('SingleChildScrollView', 'Scrollable Area'), ('PageView', 'Page Swiper'), ('AppBar', 'Top Navigation Bar'), ('BottomNavigationBar', 'Bottom Navigation'), ('TabBar', 'Tab Bar'), ('Drawer', 'Side Menu'), ('Scaffold', 'Screen Structure'), ('SafeArea', 'Safe Area'), ('SizedBox', 'Fixed Size Box'), ('AspectRatio', 'Aspect Ratio'), ('FutureBuilder', 'Data Loader'), ('StreamBuilder', 'Live Data Stream')], help_text='What type of element do you want to add?', max_length=50, verbose_name='Widget Type')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order in which this widget appears (0 = first, 1 = second, etc.)', verbose_name='Display Order')),
                ('widget_id', models.CharField(blank=True, help_text='Unique identifier for this widget (used for actions and data binding)', max_length=100, verbose_name='Widget ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_widget', models.ForeignKey(blank=True, help_text='Which widget should contain this widget? (leave empty for root level)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_widgets', to='core.widget', verbose_name='Parent Widget')),
                ('screen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='widgets', to='core.screen', verbose_name='Screen')),
            ],
            options={
                'verbose_name': 'Widget',
                'verbose_name_plural': 'Widgets',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='CustomPubDevWidget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('package_name', models.CharField(help_text="Name of the pub.dev package (e.g., 'flutter_staggered_grid_view')", max_length=100, verbose_name='Package Name')),
                ('package_version', models.CharField(blank=True, help_text='Specific version to use (leave empty for latest)', max_length=20, verbose_name='Package Version')),
                ('widget_class_name', models.CharField(help_text="Name of the widget class from the package (e.g., 'StaggeredGridView')", max_length=100, verbose_name='Widget Class Name')),
                ('import_statement', models.CharField(help_text="Full import statement (e.g., 'package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart')", max_length=200, verbose_name='Import Statement')),
                ('description', models.TextField(blank=True, help_text='What does this widget do?', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Is this widget available for use?', verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_widgets', to='core.application', verbose_name='Application')),
            ],
            options={
                'verbose_name': 'Custom Widget (pub.dev)',
                'verbose_name_plural': 'Custom Widgets (pub.dev)',
                'unique_together': {('application', 'package_name', 'widget_class_name')},
            },
        ),
        migrations.CreateModel(
            name='WidgetProperty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('property_name', models.CharField(help_text="What aspect of the widget are you configuring? (e.g., 'text', 'color', 'onPressed')", max_length=100, verbose_name='Property Name')),
                ('property_type', models.CharField(choices=[('string', 'Text'), ('integer', 'Number (Whole)'), ('decimal', 'Number (Decimal)'), ('boolean', 'True/False'), ('color', 'Color'), ('icon', 'Icon'), ('alignment', 'Alignment'), ('action_reference', 'Action (What Happens)'), ('data_source_field_reference', 'Data Field'), ('screen_reference', 'Screen Navigation'), ('asset_reference', 'Image/File'), ('url', 'Web Address'), ('json', 'Complex Data')], help_text='What type of value does this property need?', max_length=30, verbose_name='Property Type')),
                ('string_value', models.TextField(blank=True, help_text='Enter the text content', verbose_name='Text Value')),
                ('integer_value', models.IntegerField(blank=True, help_text='Enter a whole number', null=True, verbose_name='Number Value')),
                ('decimal_value', models.DecimalField(blank=True, decimal_places=2, help_text='Enter a decimal number', max_digits=10, null=True, verbose_name='Decimal Value')),
                ('boolean_value', models.BooleanField(default=False, verbose_name='True/False Value')),
                ('color_value', colorfield.fields.ColorField(blank=True, default=None, help_text='Choose a color', image_field=None, max_length=25, null=True, samples=None, verbose_name='Color Value')),
                ('alignment_value', models.CharField(blank=True, choices=[('center', 'Center'), ('left', 'Left'), ('right', 'Right'), ('top', 'Top'), ('bottom', 'Bottom'), ('topLeft', 'Top Left'), ('topRight', 'Top Right'), ('bottomLeft', 'Bottom Left'), ('bottomRight', 'Bottom Right')], max_length=20, verbose_name='Alignment Value')),
                ('url_value', models.URLField(blank=True, help_text='Enter a web address', verbose_name='URL Value')),
                ('json_value', models.TextField(blank=True, help_text='Enter JSON data', verbose_name='JSON Value')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('action_reference', models.ForeignKey(blank=True, help_text='What action should happen?', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.action', verbose_name='Action Reference')),
                ('data_source_field_reference', models.ForeignKey(blank=True, help_text='Which data field should be displayed?', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.datasourcefield', verbose_name='Data Field Reference')),
                ('screen_reference', models.ForeignKey(blank=True, help_text='Which screen should be opened?', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.screen', verbose_name='Screen Reference')),
                ('widget', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='core.widget', verbose_name='Widget')),
            ],
            options={
                'verbose_name': 'Widget Property',
                'verbose_name_plural': 'Widget Properties',
                'unique_together': {('widget', 'property_name')},
            },
        ),
    ]
