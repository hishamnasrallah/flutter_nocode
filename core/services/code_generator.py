import os
import shutil
import json
import zipfile
from pathlib import Path
from django.conf import settings
from django.template.loader import render_to_string
from ..models import Application, Screen, Widget, WidgetProperty, Action, DataSource, CustomPubDevWidget


class FlutterCodeGenerator:
    """Generates Flutter source code from database configuration"""
    
    def __init__(self, application):
        self.application = application
        self.project_path = settings.GENERATED_CODE_PATH / f"{application.package_name.replace('.', '_')}"
        self.lib_path = self.project_path / 'lib'
        
    def generate_project(self):
        """Generate complete Flutter project"""
        try:
            # Clean and create project directory
            if self.project_path.exists():
                shutil.rmtree(self.project_path)
            self.project_path.mkdir(parents=True, exist_ok=True)
            
            # Generate project structure
            self._create_project_structure()
            self._generate_pubspec_yaml()
            self._generate_main_dart()
            self._generate_theme()
            self._generate_routes()
            self._generate_screens()
            self._generate_services()
            self._generate_models()
            self._generate_widgets()
            
            # Create source code ZIP
            zip_path = self._create_source_zip()
            
            # Update application with generated files
            self.application.source_code_zip.name = f"source_zips/{self.application.package_name}_source.zip"
            self.application.save()
            
            return True, f"Flutter project generated successfully at {self.project_path}"
            
        except Exception as e:
            return False, f"Error generating Flutter project: {str(e)}"
    
    def _create_project_structure(self):
        """Create basic Flutter project structure"""
        directories = [
            'lib',
            'lib/screens',
            'lib/widgets',
            'lib/services',
            'lib/models',
            'lib/theme',
            'lib/routes',
            'lib/utils',
            'android/app/src/main/kotlin/com/example/app',
            'ios/Runner',
            'test',
            'assets/images',
            'assets/fonts',
        ]
        
        for directory in directories:
            (self.project_path / directory).mkdir(parents=True, exist_ok=True)
    
    def _generate_pubspec_yaml(self):
        """Generate pubspec.yaml with dependencies"""
        # Get custom pub.dev widgets
        custom_widgets = CustomPubDevWidget.objects.filter(
            application=self.application,
            is_active=True
        )
        
        # Base dependencies
        dependencies = {
            'flutter': {'sdk': 'flutter'},
            'http': '^1.1.0',
            'shared_preferences': '^2.2.2',
            'url_launcher': '^6.2.1',
            'image_picker': '^1.0.4',
            'path_provider': '^2.1.1',
        }
        
        # Add custom widget dependencies
        for widget in custom_widgets:
            if widget.package_version:
                dependencies[widget.package_name] = f"^{widget.package_version}"
            else:
                dependencies[widget.package_name] = 'any'
        
        pubspec_content = {
            'name': self.application.package_name.split('.')[-1],
            'description': self.application.description or 'A Flutter application generated by Flutter App Builder',
            'version': f"{self.application.version}+1",
            'environment': {
                'sdk': '>=3.0.0 <4.0.0'
            },
            'dependencies': dependencies,
            'dev_dependencies': {
                'flutter_test': {'sdk': 'flutter'},
                'flutter_lints': '^3.0.0'
            },
            'flutter': {
                'uses-material-design': True,
                'assets': [
                    'assets/images/',
                ]
            }
        }
        
        # Write pubspec.yaml
        with open(self.project_path / 'pubspec.yaml', 'w') as f:
            self._write_yaml(f, pubspec_content)
    
    def _write_yaml(self, file, data, indent=0):
        """Write YAML content manually"""
        for key, value in data.items():
            if isinstance(value, dict):
                file.write('  ' * indent + f"{key}:\n")
                self._write_yaml(file, value, indent + 1)
            elif isinstance(value, list):
                file.write('  ' * indent + f"{key}:\n")
                for item in value:
                    file.write('  ' * (indent + 1) + f"- {item}\n")
            else:
                file.write('  ' * indent + f"{key}: {value}\n")
    
    def _generate_main_dart(self):
        """Generate main.dart file"""
        screens = Screen.objects.filter(application=self.application)
        home_screen = screens.filter(is_home_screen=True).first()
        
        if not home_screen:
            home_screen = screens.first()
        
        main_content = f'''import 'package:flutter/material.dart';
import 'theme/app_theme.dart';
import 'routes/app_routes.dart';
{self._generate_screen_imports()}

void main() {{
  runApp(MyApp());
}}

class MyApp extends StatelessWidget {{
  @override
  Widget build(BuildContext context) {{
    return MaterialApp(
      title: '{self.application.name}',
      theme: AppTheme.lightTheme,
      darkTheme: AppTheme.darkTheme,
      themeMode: {('ThemeMode.dark' if self.application.theme.is_dark_mode else 'ThemeMode.light')},
      initialRoute: '{home_screen.route_name if home_screen else '/'}',
      routes: AppRoutes.routes,
      debugShowCheckedModeBanner: false,
    );
  }}
}}
'''
        
        with open(self.lib_path / 'main.dart', 'w') as f:
            f.write(main_content)
    
    def _generate_screen_imports(self):
        """Generate import statements for all screens"""
        screens = Screen.objects.filter(application=self.application)
        imports = []
        
        for screen in screens:
            screen_file_name = self._to_snake_case(screen.name) + '_screen.dart'
            imports.append(f"import 'screens/{screen_file_name}';")
        
        return '\n'.join(imports)
    
    def _generate_theme(self):
        """Generate theme configuration"""
        theme = self.application.theme
        
        theme_content = f'''import 'package:flutter/material.dart';

class AppTheme {{
  static const Color primaryColor = Color(0xFF{theme.primary_color.lstrip('#')});
  static const Color accentColor = Color(0xFF{theme.accent_color.lstrip('#')});
  static const Color backgroundColor = Color(0xFF{theme.background_color.lstrip('#')});
  static const Color textColor = Color(0xFF{theme.text_color.lstrip('#')});
  
  static ThemeData get lightTheme {{
    return ThemeData(
      primarySwatch: _createMaterialColor(primaryColor),
      primaryColor: primaryColor,
      colorScheme: ColorScheme.fromSeed(
        seedColor: primaryColor,
        brightness: Brightness.light,
      ),
      scaffoldBackgroundColor: backgroundColor,
      fontFamily: '{theme.font_family}',
      textTheme: TextTheme(
        bodyLarge: TextStyle(color: textColor),
        bodyMedium: TextStyle(color: textColor),
        titleLarge: TextStyle(color: textColor),
      ),
      appBarTheme: AppBarTheme(
        backgroundColor: primaryColor,
        foregroundColor: Colors.white,
        elevation: 2,
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: primaryColor,
          foregroundColor: Colors.white,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: accentColor,
      ),
    );
  }}
  
  static ThemeData get darkTheme {{
    return ThemeData(
      primarySwatch: _createMaterialColor(primaryColor),
      primaryColor: primaryColor,
      colorScheme: ColorScheme.fromSeed(
        seedColor: primaryColor,
        brightness: Brightness.dark,
      ),
      scaffoldBackgroundColor: Color(0xFF121212),
      fontFamily: '{theme.font_family}',
      textTheme: TextTheme(
        bodyLarge: TextStyle(color: Colors.white),
        bodyMedium: TextStyle(color: Colors.white),
        titleLarge: TextStyle(color: Colors.white),
      ),
      appBarTheme: AppBarTheme(
        backgroundColor: primaryColor,
        foregroundColor: Colors.white,
        elevation: 2,
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: primaryColor,
          foregroundColor: Colors.white,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: accentColor,
      ),
    );
  }}
  
  static MaterialColor _createMaterialColor(Color color) {{
    List strengths = <double>[.05];
    Map<int, Color> swatch = {{}};
    final int r = color.red, g = color.green, b = color.blue;

    for (int i = 1; i < 10; i++) {{
      strengths.add(0.1 * i);
    }}
    
    for (var strength in strengths) {{
      final double ds = 0.5 - strength;
      swatch[(strength * 1000).round()] = Color.fromRGBO(
        r + ((ds < 0 ? r : (255 - r)) * ds).round(),
        g + ((ds < 0 ? g : (255 - g)) * ds).round(),
        b + ((ds < 0 ? b : (255 - b)) * ds).round(),
        1,
      );
    }}
    
    return MaterialColor(color.value, swatch);
  }}
}}
'''
        
        with open(self.lib_path / 'theme' / 'app_theme.dart', 'w') as f:
            f.write(theme_content)
    
    def _generate_routes(self):
        """Generate route configuration"""
        screens = Screen.objects.filter(application=self.application)
        
        routes_content = '''import 'package:flutter/material.dart';
'''
        
        # Add screen imports
        for screen in screens:
            screen_file_name = self._to_snake_case(screen.name) + '_screen.dart'
            screen_class_name = self._to_pascal_case(screen.name) + 'Screen'
            routes_content += f"import '../screens/{screen_file_name}';\n"
        
        routes_content += '''
class AppRoutes {
  static Map<String, WidgetBuilder> get routes {
    return {
'''
        
        # Add route mappings
        for screen in screens:
            screen_class_name = self._to_pascal_case(screen.name) + 'Screen'
            routes_content += f"      '{screen.route_name}': (context) => {screen_class_name}(),\n"
        
        routes_content += '''    };
  }
}
'''
        
        with open(self.lib_path / 'routes' / 'app_routes.dart', 'w') as f:
            f.write(routes_content)
    
    def _generate_screens(self):
        """Generate screen files"""
        screens = Screen.objects.filter(application=self.application)
        
        for screen in screens:
            self._generate_single_screen(screen)
    
    def _generate_single_screen(self, screen):
        """Generate a single screen file"""
        screen_file_name = self._to_snake_case(screen.name) + '_screen.dart'
        screen_class_name = self._to_pascal_case(screen.name) + 'Screen'
        
        # Get root widgets for this screen
        root_widgets = Widget.objects.filter(
            screen=screen,
            parent_widget=None
        ).order_by('order')
        
        screen_content = f'''import 'package:flutter/material.dart';
import '../services/api_service.dart';
import '../models/app_models.dart';

class {screen_class_name} extends StatefulWidget {{
  @override
  _{screen_class_name}State createState() => _{screen_class_name}State();
}}

class _{screen_class_name}State extends State<{screen_class_name}> {{
  final ApiService _apiService = ApiService();
  
  @override
  Widget build(BuildContext context) {{
    return Scaffold(
'''
        
        # Add AppBar if needed
        if screen.show_app_bar:
            screen_content += f'''      appBar: AppBar(
        title: Text('{screen.app_bar_title or screen.name}'),
        automaticallyImplyLeading: {str(screen.show_back_button).lower()},
      ),
'''
        
        # Add body
        screen_content += '''      body: '''
        
        if root_widgets.count() == 1:
            screen_content += self._generate_widget_code(root_widgets.first(), 0)
        elif root_widgets.count() > 1:
            screen_content += '''Column(
        children: [
'''
            for widget in root_widgets:
                screen_content += '          ' + self._generate_widget_code(widget, 2) + ',\n'
            screen_content += '''        ],
      )'''
        else:
            screen_content += '''Center(
        child: Text('No content configured for this screen'),
      )'''
        
        screen_content += ''',
    );
  }
}
'''
        
        with open(self.lib_path / 'screens' / screen_file_name, 'w') as f:
            f.write(screen_content)
    
    def _generate_widget_code(self, widget, indent_level):
        """Generate Dart code for a widget"""
        indent = '  ' * indent_level
        widget_code = ''
        
        # Get widget properties
        properties = WidgetProperty.objects.filter(widget=widget)
        prop_dict = {prop.property_name: prop for prop in properties}
        
        # Get child widgets
        child_widgets = Widget.objects.filter(
            parent_widget=widget
        ).order_by('order')
        
        if widget.widget_type == 'Text':
            text_value = prop_dict.get('text', None)
            if text_value and text_value.data_source_field_reference:
                # Dynamic text from data source
                widget_code = f"Text(data['{text_value.data_source_field_reference.field_name}'] ?? '')"
            else:
                text = text_value.get_value() if text_value else 'Text'
                widget_code = f"Text('{text}')"
            
            # Add text styling
            style_props = []
            if 'color' in prop_dict:
                color = prop_dict['color'].get_value()
                widget_code = widget_code[:-1] + f", style: TextStyle(color: Color(0xFF{color.lstrip('#')}))"
            
        elif widget.widget_type == 'ElevatedButton':
            text_prop = prop_dict.get('text', None)
            text = text_prop.get_value() if text_prop else 'Button'
            
            action_prop = prop_dict.get('onPressed', None)
            action_code = 'null'
            if action_prop and action_prop.action_reference:
                action_code = self._generate_action_code(action_prop.action_reference)
            
            widget_code = f'''ElevatedButton(
{indent}  onPressed: {action_code},
{indent}  child: Text('{text}'),
{indent})'''
        
        elif widget.widget_type == 'Column':
            widget_code = f'''Column(
{indent}  children: [
'''
            for child in child_widgets:
                widget_code += f"{indent}    {self._generate_widget_code(child, indent_level + 2)},\n"
            widget_code += f"{indent}  ],\n{indent})"
        
        elif widget.widget_type == 'Row':
            widget_code = f'''Row(
{indent}  children: [
'''
            for child in child_widgets:
                widget_code += f"{indent}    {self._generate_widget_code(child, indent_level + 2)},\n"
            widget_code += f"{indent}  ],\n{indent})"
        
        elif widget.widget_type == 'Container':
            widget_code = f'''Container(
'''
            # Add container properties
            if 'width' in prop_dict:
                widget_code += f"{indent}  width: {prop_dict['width'].get_value()},\n"
            if 'height' in prop_dict:
                widget_code += f"{indent}  height: {prop_dict['height'].get_value()},\n"
            if 'color' in prop_dict:
                color = prop_dict['color'].get_value()
                widget_code += f"{indent}  color: Color(0xFF{color.lstrip('#')}),\n"
            
            # Add child
            if child_widgets.exists():
                widget_code += f"{indent}  child: {self._generate_widget_code(child_widgets.first(), indent_level + 1)},\n"
            
            widget_code += f"{indent})"
        
        elif widget.widget_type == 'ListView':
            # Generate ListView with data source
            data_source_prop = prop_dict.get('dataSource', None)
            if data_source_prop and data_source_prop.data_source_field_reference:
                data_source = data_source_prop.data_source_field_reference.data_source
                widget_code = f'''FutureBuilder<List<dynamic>>(
{indent}  future: _apiService.fetchData('{data_source.name}'),
{indent}  builder: (context, snapshot) {{
{indent}    if (snapshot.connectionState == ConnectionState.waiting) {{
{indent}      return Center(child: CircularProgressIndicator());
{indent}    }}
{indent}    if (snapshot.hasError) {{
{indent}      return Center(child: Text('Error: ${{snapshot.error}}'));
{indent}    }}
{indent}    final data = snapshot.data ?? [];
{indent}    return ListView.builder(
{indent}      itemCount: data.length,
{indent}      itemBuilder: (context, index) {{
{indent}        final item = data[index];
{indent}        return ListTile(
{indent}          title: Text(item['title'] ?? ''),
{indent}          subtitle: Text(item['subtitle'] ?? ''),
{indent}        );
{indent}      }},
{indent}    );
{indent}  }},
{indent})'''
            else:
                # Static ListView
                widget_code = f'''ListView(
{indent}  children: [
'''
                for child in child_widgets:
                    widget_code += f"{indent}    {self._generate_widget_code(child, indent_level + 2)},\n"
                widget_code += f"{indent}  ],\n{indent})"
        
        elif widget.widget_type == 'Image':
            image_prop = prop_dict.get('imageUrl', None)
            if image_prop:
                image_url = image_prop.get_value()
                if image_url.startswith('http'):
                    widget_code = f"Image.network('{image_url}')"
                else:
                    widget_code = f"Image.asset('{image_url}')"
            else:
                widget_code = "Placeholder(fallbackHeight: 200, fallbackWidth: 200)"
        
        else:
            # Default widget handling
            widget_code = f"{widget.widget_type}()"
        
        return widget_code
    
    def _generate_action_code(self, action):
        """Generate Dart code for actions"""
        if action.action_type == 'navigate':
            if action.target_screen:
                return f"() {{ Navigator.pushNamed(context, '{action.target_screen.route_name}'); }}"
        elif action.action_type == 'navigate_back':
            return "() { Navigator.pop(context); }"
        elif action.action_type == 'show_dialog':
            return f'''() {{
              showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: Text('{action.dialog_title or 'Alert'}'),
                  content: Text('{action.dialog_message or 'Message'}'),
                  actions: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      child: Text('OK'),
                    ),
                  ],
                ),
              );
            }}'''
        elif action.action_type == 'api_call':
            if action.api_data_source:
                return f"() {{ _apiService.fetchData('{action.api_data_source.name}'); }}"
        
        return "null"
    
    def _generate_services(self):
        """Generate API service"""
        data_sources = DataSource.objects.filter(application=self.application)
        
        service_content = '''import 'dart:convert';
import 'package:http/http.dart' as http;

class ApiService {
  static final ApiService _instance = ApiService._internal();
  factory ApiService() => _instance;
  ApiService._internal();
  
'''
        
        # Generate methods for each data source
        for data_source in data_sources:
            method_name = self._to_camel_case(data_source.name)
            
            if data_source.data_source_type == 'REST_API':
                service_content += f'''
  Future<List<dynamic>> fetch{self._to_pascal_case(data_source.name)}() async {{
    try {{
      final url = '{data_source.base_url}{data_source.endpoint}';
      final response = await http.{data_source.method.lower()}(
        Uri.parse(url),
        headers: {{
          'Content-Type': 'application/json',
'''
                
                # Add custom headers
                if data_source.headers:
                    for line in data_source.headers.split('\n'):
                        if ':' in line:
                            key, value = line.split(':', 1)
                            service_content += f"          '{key.strip()}': '{value.strip()}',\n"
                
                service_content += '''        },
      );
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return data is List ? data : [data];
      } else {
        throw Exception('Failed to load data: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Network error: $e');
    }
  }
'''
            
            elif data_source.data_source_type == 'STATIC_JSON':
                static_data = data_source.static_data or '[]'
                service_content += f'''
  Future<List<dynamic>> fetch{self._to_pascal_case(data_source.name)}() async {{
    try {{
      final data = json.decode('''{static_data}''');
      return data is List ? data : [data];
    }} catch (e) {{
      throw Exception('JSON parsing error: $e');
    }}
  }}
'''
        
        # Add generic fetchData method
        service_content += '''
  Future<List<dynamic>> fetchData(String dataSourceName) async {
    switch (dataSourceName) {
'''
        
        for data_source in data_sources:
            service_content += f"      case '{data_source.name}': return fetch{self._to_pascal_case(data_source.name)}();\n"
        
        service_content += '''      default: throw Exception('Unknown data source: $dataSourceName');
    }
  }
}
'''
        
        with open(self.lib_path / 'services' / 'api_service.dart', 'w') as f:
            f.write(service_content)
    
    def _generate_models(self):
        """Generate data models"""
        models_content = '''// Data models for the application

class AppData {
  final Map<String, dynamic> data;
  
  AppData(this.data);
  
  factory AppData.fromJson(Map<String, dynamic> json) {
    return AppData(json);
  }
  
  Map<String, dynamic> toJson() {
    return data;
  }
  
  dynamic operator [](String key) => data[key];
  void operator []=(String key, dynamic value) => data[key] = value;
}
'''
        
        with open(self.lib_path / 'models' / 'app_models.dart', 'w') as f:
            f.write(models_content)
    
    def _generate_widgets(self):
        """Generate custom widget components"""
        widgets_content = '''import 'package:flutter/material.dart';

// Custom widgets for the application

class AppCard extends StatelessWidget {
  final Widget child;
  final EdgeInsets? padding;
  final Color? backgroundColor;
  
  const AppCard({
    Key? key,
    required this.child,
    this.padding,
    this.backgroundColor,
  }) : super(key: key);
  
  @override
  Widget build(BuildContext context) {
    return Card(
      color: backgroundColor,
      child: Padding(
        padding: padding ?? EdgeInsets.all(16.0),
        child: child,
      ),
    );
  }
}

class LoadingWidget extends StatelessWidget {
  final String? message;
  
  const LoadingWidget({Key? key, this.message}) : super(key: key);
  
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(),
          if (message != null) ...[
            SizedBox(height: 16),
            Text(message!),
          ],
        ],
      ),
    );
  }
}

class ErrorWidget extends StatelessWidget {
  final String message;
  final VoidCallback? onRetry;
  
  const ErrorWidget({
    Key? key,
    required this.message,
    this.onRetry,
  }) : super(key: key);
  
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.error_outline, size: 64, color: Colors.red),
          SizedBox(height: 16),
          Text(message, textAlign: TextAlign.center),
          if (onRetry != null) ...[
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: onRetry,
              child: Text('Retry'),
            ),
          ],
        ],
      ),
    );
  }
}
'''
        
        with open(self.lib_path / 'widgets' / 'custom_widgets.dart', 'w') as f:
            f.write(widgets_content)
    
    def _create_source_zip(self):
        """Create ZIP file of the generated source code"""
        zip_path = settings.SOURCE_ZIP_STORAGE_PATH / f"{self.application.package_name}_source.zip"
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(self.project_path):
                for file in files:
                    file_path = Path(root) / file
                    arcname = file_path.relative_to(self.project_path)
                    zipf.write(file_path, arcname)
        
        return zip_path
    
    def _to_snake_case(self, text):
        """Convert text to snake_case"""
        import re
        text = re.sub(r'([A-Z]+)([A-Z][a-z])', r'\1_\2', text)
        text = re.sub(r'([a-z\d])([A-Z])', r'\1_\2', text)
        return text.lower().replace(' ', '_').replace('-', '_')
    
    def _to_pascal_case(self, text):
        """Convert text to PascalCase"""
        return ''.join(word.capitalize() for word in text.replace('_', ' ').replace('-', ' ').split())
    
    def _to_camel_case(self, text):
        """Convert text to camelCase"""
        pascal = self._to_pascal_case(text)
        return pascal[0].lower() + pascal[1:] if pascal else ''