# File: core/services/code_generation/project/config_manager.py
"""
Manages project configuration files.
Handles pubspec.yaml, AndroidManifest.xml, and Gradle configuration.
"""

import re
import time
from pathlib import Path

from ..base import BaseGenerator, GeneratorContext
from ..exceptions import ConfigurationException


class ConfigurationManager(BaseGenerator):
    """
    Manages Flutter project configuration files.
    """

    def _do_generate(self, context: GeneratorContext) -> bool:
        """
        Generate all configuration files.

        Args:
            context: GeneratorContext containing project information

        Returns:
            bool: True if successful
        """
        try:
            # Generate pubspec.yaml
            if not self._generate_pubspec_yaml(context):
                raise ConfigurationException("Failed to generate pubspec.yaml")

            # Update Android configuration
            if not self._update_android_config(context):
                self.add_warning("Could not fully update Android configuration")

            return True

        except Exception as e:
            self.add_error(str(e))
            return False

    def _generate_pubspec_yaml(self, context: GeneratorContext) -> bool:
        """
        Generate pubspec.yaml with dependencies.

        Args:
            context: GeneratorContext containing project information

        Returns:
            bool: True if successful
        """
        # Base dependencies
        dependencies = {
            'flutter': {'sdk': 'flutter'},
            'http': '^1.1.0',
            'shared_preferences': '^2.2.2',
            'url_launcher': '^6.2.1',
            'image_picker': '^1.0.4',
            'path_provider': '^2.1.1',
        }

        # Add custom widget dependencies
        for widget in context.custom_widgets:
            if widget.package_version:
                dependencies[widget.package_name] = f"^{widget.package_version}"
            else:
                dependencies[widget.package_name] = 'any'

        # Build pubspec content
        content = self._build_pubspec_content(context, dependencies)

        # Write to file
        pubspec_path = context.project_path / 'pubspec.yaml'
        return self.write_file(pubspec_path, content, context)

    def _build_pubspec_content(self, context: GeneratorContext, dependencies: dict) -> str:
        """
        Build pubspec.yaml content.

        Args:
            context: GeneratorContext containing project information
            dependencies: Dictionary of dependencies

        Returns:
            str: YAML content
        """
        package_name = context.application.package_name.split('.')[-1]
        description = context.application.description or 'A Flutter application generated by Flutter App Builder'
        version = f"{context.application.version}+1"

        yaml_content = f"""name: {package_name}
description: {description}
version: {version}

environment:
  sdk: '>=3.0.0 <4.0.0'

dependencies:
"""

        # Add dependencies
        for dep_name, dep_value in dependencies.items():
            if isinstance(dep_value, dict):
                yaml_content += f"  {dep_name}:\n"
                for key, val in dep_value.items():
                    yaml_content += f"    {key}: {val}\n"
            else:
                yaml_content += f"  {dep_name}: {dep_value}\n"

        # Add dev dependencies
        yaml_content += """
dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^3.0.0

flutter:
  uses-material-design: true
  assets:
    - assets/images/
"""

        return yaml_content

    def _update_android_config(self, context: GeneratorContext) -> bool:
        """
        Update Android configuration files.

        Args:
            context: GeneratorContext containing project information

        Returns:
            bool: True if successful
        """
        success = True

        # Update AndroidManifest.xml
        if not self._update_android_manifest(context):
            self.add_warning("Could not update AndroidManifest.xml")
            success = False

        # Update build.gradle
        if not self._update_android_gradle(context):
            self.add_warning("Could not update build.gradle")
            success = False

        return success

    def _update_android_manifest(self, context: GeneratorContext) -> bool:
        """
        Add internet permission to AndroidManifest.xml.

        Args:
            context: GeneratorContext containing project information

        Returns:
            bool: True if successful
        """
        manifest_path = context.project_path / 'android' / 'app' / 'src' / 'main' / 'AndroidManifest.xml'

        if not manifest_path.exists():
            return False

        try:
            with open(manifest_path, 'r', encoding='utf-8') as f:
                content = f.read()

            # Check if internet permission already exists
            if 'android.permission.INTERNET' not in content:
                # Add internet permission
                content = content.replace(
                    '<application',
                    '<uses-permission android:name="android.permission.INTERNET"/>\n    <application'
                )

                with open(manifest_path, 'w', encoding='utf-8') as f:
                    f.write(content)

                print("Added Internet permission to AndroidManifest.xml")

            return True

        except Exception as e:
            self.add_error(f"Failed to update AndroidManifest.xml: {str(e)}")
            return False

    def _update_android_gradle(self, context: GeneratorContext) -> bool:
        """
        Update Android build.gradle with NDK version.

        Args:
            context: GeneratorContext containing project information

        Returns:
            bool: True if successful
        """
        # Try multiple times in case file is still being written
        for attempt in range(3):
            # Check for both .gradle and .gradle.kts files
            build_gradle_path = context.project_path / 'android' / 'app' / 'build.gradle'
            build_gradle_kts_path = context.project_path / 'android' / 'app' / 'build.gradle.kts'

            gradle_file = None
            is_kotlin_script = False

            if build_gradle_kts_path.exists():
                gradle_file = build_gradle_kts_path
                is_kotlin_script = True
            elif build_gradle_path.exists():
                gradle_file = build_gradle_path
                is_kotlin_script = False
            else:
                if attempt < 2:
                    time.sleep(1)
                    continue
                return False

            try:
                # Read the existing gradle file
                with open(gradle_file, 'r', encoding='utf-8') as f:
                    content = f.read()

                original_content = content

                # Add NDK version
                content = self._add_ndk_version(content, is_kotlin_script)

                # Only write if content changed
                if content != original_content:
                    with open(gradle_file, 'w', encoding='utf-8') as f:
                        f.write(content)
                    print(f"Updated {gradle_file.name} with NDK version")

                return True

            except Exception as e:
                if attempt < 2:
                    time.sleep(1)
                else:
                    self.add_error(f"Failed to update gradle file: {str(e)}")
                    return False

        return False

    def _add_ndk_version(self, content: str, is_kotlin_script: bool) -> str:
        """
        Add NDK version to gradle content.

        Args:
            content: Gradle file content
            is_kotlin_script: Whether this is a Kotlin script file

        Returns:
            str: Updated content
        """
        ndk_version = "27.0.12077973"

        if is_kotlin_script:
            # For Kotlin script (.gradle.kts)
            # Check if ndkVersion already exists with correct version
            if f'ndkVersion = "{ndk_version}"' in content:
                return content

            # Remove any existing ndkVersion lines completely
            lines = content.split('\n')
            filtered_lines = []
            for line in lines:
                if 'ndkVersion' not in line:
                    filtered_lines.append(line)
            content = '\n'.join(filtered_lines)

            # Find android block and add ndkVersion right after it
            android_pattern = r'android\s*\{'
            match = re.search(android_pattern, content)
            if match:
                insert_pos = match.end()
                # Add newline and proper indentation
                ndk_line = f'\n    ndkVersion = "{ndk_version}"'
                content = content[:insert_pos] + ndk_line + content[insert_pos:]
        else:
            # For Groovy script (.gradle)
            # Check if ndkVersion already exists with correct version
            if f'ndkVersion "{ndk_version}"' in content:
                return content

            # Remove any existing ndkVersion
            content = re.sub(r'ndkVersion\s*["\'][\d.]+["\']', '', content)

            # Find android block and add ndkVersion
            android_block_start = content.find('android {')
            if android_block_start != -1:
                insert_pos = android_block_start + len('android {')
                ndk_line = f'\n    ndkVersion "{ndk_version}"'
                content = content[:insert_pos] + ndk_line + content[insert_pos:]

        return content